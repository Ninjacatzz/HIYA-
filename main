package application;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCombination;
import javafx.scene.shape.*;
import javafx.scene.layout.Pane;
import javafx.scene.text.Text;
import javafx.scene.paint.Color;

import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.animation.Animation;
import javafx.animation.AnimationTimer;
import javafx.animation.FillTransition;
import javafx.animation.TranslateTransition;
import javafx.util.Duration;

public class Main extends Application {
	// Map
	public static Rectangle map = new Rectangle(600, 350);
	// P1
	public static Rectangle p1 = new Rectangle(50, 50);
	// P2
	public static Rectangle p2 = new Rectangle(50, 50);
	// Pane
	public static Pane root = new Pane();

	// TranslateTransition Variable
	public static TranslateTransition transition = new TranslateTransition();

	// Animation Timer
	public static AnimationTimer gameLoop;

	// P1 Bullet Desired X
	public static double p1DesiredX = 700;
	// P2 Bullet Desired X
	public static double p2DesiredX = -700;

	// P1 newY
	public static double p1NewY;
	// P2 newY
	public static double p2NewY;

	public static Rectangle[] p1Bullet = new Rectangle[999]; 
	
	public static Rectangle[] p2Bullet = new Rectangle[999];
	
	public static int p1BulletCounter = 0;
	public static int p2BulletCounter = 0;
	
	// lives
	public static int p1Lives = 3;
	public static int p2Lives = 3;

	@Override
	public void start(Stage primaryStage) {
		// P1 Bullet Initialization
		for(int i = 0; i < p1Bullet.length; i++) {
			p1Bullet[i] = new Rectangle(30,30);
		}
		// P2 Bullet Initialization
		for(int j = 0; j < p1Bullet.length; j++) {
			p2Bullet[j] = new Rectangle(30,30);
		}
		
		// Scene
		Scene scene = new Scene(root, 900, 600);

		// Application Title
		primaryStage.setScene(scene);
		primaryStage.setTitle("HIYA!");
		primaryStage.show();

		// Key Numbers
		int mapCenter = 250;
		int screenCenter = (int) scene.getWidth() / 2;
		int p1Center = 100;
		int p2Center = 800;

		// Map Location
		map.setX(screenCenter - map.getWidth() / 2);
		map.setY(mapCenter - map.getHeight() / 2);
		root.getChildren().add(map);
		map.setFill(Color.TRANSPARENT);
		map.setStroke(Color.BLACK);
		map.setStrokeWidth(2);

		// Player 1 Start Position
		p1.setX(p1Center - p1.getWidth() / 2);
		p1.setY(mapCenter - p1.getHeight() / 2);
		root.getChildren().add(p1);
		p1.setFill(Color.RED);

		// Player 2 Start Position
		p2.setX(p2Center - p2.getWidth() / 2);
		p2.setY(mapCenter - p2.getHeight() / 2);
		root.getChildren().add(p2);
		p2.setFill(Color.BLUE);

		

		// lives locations
		Rectangle p1Lives1 = new Rectangle(30, 30);
		p1Lives1.setX(map.getX());
		p1Lives1.setY(map.getY() + map.getHeight() + 5);
		root.getChildren().add(p1Lives1);
		p1Lives1.setFill(Color.GREY);

		Rectangle p1Lives2 = new Rectangle(30, 30);
		p1Lives2.setX(p1Lives1.getX() + p1Lives2.getWidth() + 5);
		p1Lives2.setY(map.getY() + map.getHeight() + 5);
		root.getChildren().add(p1Lives2);
		p1Lives2.setFill(Color.GREY);

		Rectangle p1Lives3 = new Rectangle(30, 30);
		p1Lives3.setX(p1Lives2.getX() + p1Lives3.getWidth() + 5);
		p1Lives3.setY(map.getY() + map.getHeight() + 5);
		root.getChildren().add(p1Lives3);
		p1Lives3.setFill(Color.GREY);

		Rectangle p2Lives1 = new Rectangle(30, 30);
		p2Lives1.setX(map.getX() + map.getWidth() - p2Lives1.getWidth());
		p2Lives1.setY(map.getY() + map.getHeight() + 5);
		root.getChildren().add(p2Lives1);
		p2Lives1.setFill(Color.GREY);

		Rectangle p2Lives2 = new Rectangle(30, 30);
		p2Lives2.setX(p2Lives1.getX() - p2Lives2.getWidth() - 5);
		p2Lives2.setY(map.getY() + map.getHeight() + 5);
		root.getChildren().add(p2Lives2);
		p2Lives2.setFill(Color.GREY);

		Rectangle p2Lives3 = new Rectangle(30, 30);
		p2Lives3.setX(p2Lives2.getX() - p2Lives3.getWidth() - 5);
		p2Lives3.setY(map.getY() + map.getHeight() + 5);
		root.getChildren().add(p2Lives3);
		p2Lives3.setFill(Color.GREY);

		scene.addEventHandler(KeyEvent.KEY_PRESSED, event -> {
			// Move Up (P1) Event Handler
			if (event.getCode() == KeyCode.W) {
				p1NewY = p1.getY() - 15;
				if(p1NewY > map.getY() && p1NewY < map.getY() + map.getHeight()-p1.getHeight()) {
					p1.setY(p1NewY);
				}
			}
			// Move Down (P1) Event Handler
			if (event.getCode() == KeyCode.S) {
				p1NewY = p1.getY() + 15;
				if(p1NewY > map.getY() && p1NewY < map.getY() + map.getHeight()-p1.getHeight()) {
					p1.setY(p1NewY);
				}
			}
			// Move Up (P2) Event Handler
			if (event.getCode() == KeyCode.UP) {
				p2NewY = p2.getY() - 15;
				if(p2NewY > map.getY() && p2NewY < map.getY() + map.getHeight()-p2.getHeight()) {
					p2.setY(p2NewY);
				}
			}
			// Move Down (P2) Event Handler
			if (event.getCode() == KeyCode.DOWN) {
				p2NewY = p2.getY() + 15;
				if(p2NewY > map.getY() && p2NewY < map.getY() + map.getHeight()-p2.getHeight()) {
					p2.setY(p2NewY);
				}
			}
			// Player 1 Bullet Event Handler
			if (event.getCode() == KeyCode.D) {
				p1Bullet(p1BulletCounter);

			}
			// Player 2 Bullet Event Handler
			if (event.getCode() == KeyCode.LEFT) {
				p2Bullet(p2BulletCounter);
			}
			// Temporary Start Button
			if(event.getCode() == KeyCode.SPACE) {
				gameLoop.start();
				System.out.println("Game loop has started");
			}
		});

		gameLoop = new AnimationTimer() {
			@Override
			public void handle(long now) {
				//P1 Collision Detection
				if(p1.getBoundsInParent().intersects(p2Bullet[p2BulletCounter].getBoundsInParent())) {
					root.getChildren().remove(p2Bullet[p2BulletCounter]);
					p2BulletCounter++;
					p1Lives--;
				}
				//P2 Collision Detection
				if(p2.getBoundsInParent().intersects(p1Bullet[p1BulletCounter].getBoundsInParent())) {
					root.getChildren().remove(p1Bullet[p1BulletCounter]);
					p1BulletCounter++;
					p2Lives--;
				}
				
				//P1 Bullet Disappear Check
				if(p1Bullet[p1BulletCounter].getTranslateX() == p1DesiredX) {
					root.getChildren().remove(p1Bullet[p1BulletCounter]);
					p1BulletCounter++;
				}
				
				//P2 Bullet Disappear Check
				if(p2Bullet[p2BulletCounter].getTranslateX() == p2DesiredX) {
					root.getChildren().remove(p2Bullet[p2BulletCounter]);
					p2BulletCounter++;
				}
				
				//P1 Lives Check 
				if(p1Lives == 2) {
					root.getChildren().remove(p1Lives3);
				}
				else if(p1Lives == 1) {
					root.getChildren().remove(p1Lives2);
				}
				else if(p1Lives == 0 ) {
					root.getChildren().remove(p1Lives1);
				}
				
				//P2 Lives Check
				if(p2Lives == 2) {
					root.getChildren().remove(p2Lives3);
				}
				else if(p2Lives == 1) {
					root.getChildren().remove(p2Lives2);
				}
				else if(p2Lives == 0 ) {
					root.getChildren().remove(p2Lives1);
				}
				
				// Original Collision Detection
//				if(p1.getX() < (p2Bullet.getX() + p2Bullet.getTranslateX()) && (p2Bullet.getX() + p2Bullet.getTranslateX()) < p1.getX() + p1.getWidth()) {
//					if(p1.getY() < (p2Bullet.getY() + p2Bullet.getTranslateY()) && (p2Bullet.getY() + p2Bullet.getTranslateY()) < p1.getY() + p1.getHeight()) {
//					
//					}
//					else if(p1.getY() < (p2Bullet.getY() + p2Bullet.getTranslateY()) + p2Bullet.getHeight() && (p2Bullet.getY() + p2Bullet.getTranslateY()) + p2Bullet.getHeight() < p1.getY() + p1.getHeight()) {
//						
//					}
//				}
				
			}
		};

	}

	public static void p1Bullet(int num) {
		p1Bullet[num].setX(p1.getX() + p1.getWidth() / 2 - p1Bullet[num].getWidth() / 2);
		p1Bullet[num].setY(p1.getY() + p1.getHeight() / 2 - p1Bullet[num].getHeight() / 2);
		p1Bullet[num].setFill(Color.BLACK);
		root.getChildren().add(p1Bullet[num]);
		transition.setDuration(Duration.millis(1000));
		transition.setNode(p1Bullet[num]);
		transition.setToX(p1DesiredX);
		transition.play();
	}

	public static void p2Bullet(int num) {
		p2Bullet[num].setX(p2.getX() + p2.getWidth() / 2 - p2Bullet[num].getWidth() / 2);
		p2Bullet[num].setY(p2.getY() + p2.getHeight() / 2 - p2Bullet[num].getHeight() / 2);
		p2Bullet[num].setFill(Color.BLACK);
		root.getChildren().add(p2Bullet[num]);
		transition.setDuration(Duration.millis(1000));
		transition.setNode(p2Bullet[num]);
		transition.setToX(p2DesiredX);
		transition.play();
		p1BulletCounter++;
	}

	public static void main(String[] args) {
		launch(args);
	}
}
